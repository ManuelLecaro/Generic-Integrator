package dto

import "generic-integration-platform/internal/domain/flow"

// FlowDTO represents the Data Transfer Object for a Flow.
type FlowDTO struct {
	ID    string    `json:"id"`    // Unique identifier for the flow
	Name  string    `json:"name"`  // Name of the flow
	Steps []StepDTO `json:"steps"` // List of steps in the flow
}

// StepDTO represents the Data Transfer Object for a step in a flow.
type StepDTO struct {
	Action        string            `json:"action"`         // Action to be performed in the step
	IntegrationID string            `json:"integration_id"` // ID of the associated integration
	Params        map[string]string `json:"params"`         // Parameters for the step
}

// ToDomain converts a FlowDTO to a Flow (domain).
func (f FlowDTO) ToDomain() *flow.Flow {
	steps := make([]*flow.Step, len(f.Steps))
	for i, stepDTO := range f.Steps {
		steps[i] = stepDTO.ToDomain()
	}

	return &flow.Flow{
		ID:    f.ID,
		Name:  f.Name,
		Steps: steps,
	}
}

// ToDomain converts a StepDTO to a Step (domain).
func (s StepDTO) ToDomain() *flow.Step {
	params := make(map[string]interface{}, len(s.Params))
	for key, value := range s.Params {
		params[key] = value
	}

	return &flow.Step{
		ID:            "", // The ID can be generated by the domain or the database.
		Name:          "", // This can be optional based on the domain.
		IntegrationID: s.IntegrationID,
		Action:        s.Action,
		Params:        params,
		NextStepID:    "", // Can be assigned based on the domain logic.
	}
}

// FromFlowDomain converts a Flow (domain) to a FlowDTO.
func FromFlowDomain(flow *flow.Flow) FlowDTO {
	steps := make([]StepDTO, len(flow.Steps))
	for i, step := range flow.Steps {
		steps[i] = FromStepDomain(step)
	}

	return FlowDTO{
		ID:    flow.ID,
		Name:  flow.Name,
		Steps: steps,
	}
}

// FromStepDomain converts a Step (domain) to a StepDTO.
func FromStepDomain(step *flow.Step) StepDTO {
	params := make(map[string]string, len(step.Params))
	for key, value := range step.Params {
		// Convert the parameters to strings for the DTO.
		params[key] = value.(string) // Ensure proper type conversion.
	}

	return StepDTO{
		Action:        step.Action,
		IntegrationID: step.IntegrationID,
		Params:        params,
	}
}
